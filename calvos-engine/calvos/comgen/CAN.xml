<?xml version="1.0" encoding="UTF-8"?>
<clv:ComponentDefinition xmlns:clv="calvos"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="calvos ../common/schemas/_component_defs.xsd "
	module="comgen.CAN" instances="[0]">
	<clv:Title>CAN Network</clv:Title>
	<clv:Desc>Models a network for Controller Area Network (CAN) protocol.</clv:Desc>
	<clv:Inputs>
		<clv:Input type="ods">template - CAN Network Definition.ods</clv:Input></clv:Inputs>
	<clv:ParamsDefinitions>
		<clv:Categories>
			<clv:Category id="catCAN_general">
				<clv:Title>General</clv:Title>
			</clv:Category>
			<clv:Category id="catCAN_network">
				<clv:Title>Network</clv:Title>
			</clv:Category>
			<clv:Category id="catCAN_messages">
				<clv:Title>Messages</clv:Title>
			</clv:Category>
			<clv:Category id="catCAN_DBC">
				<clv:Title>Messages</clv:Title>
			</clv:Category>
		</clv:Categories>
		<clv:ParamDefinition id="CAN_gen_nodes" type="list"
			category="catCAN_network" subtype="str">
			<clv:Title>Nodes to generate</clv:Title>
			<clv:Desc>List of nodes to generate C-code for.</clv:Desc>
			<clv:Default>[]</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition id="CAN_gen_file_full_names" type="boolean"
			category="catCAN_general">
			<clv:Title>Generate files full name</clv:Title>
			<clv:Desc>
				If set to "True" always uses full name for CAN generated
				C-code. Full name includes network and node name in the
				file in most of the cases. If set to "False"
				automatically determine if full names are required
				(generating more than one node in a given network or
				multiple networks) or not.
			</clv:Desc>
			<clv:Default>False</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_enum_sym_prefix"
			category="catCAN_general">
			<clv:Title>
				Prefix for data types enumerated symbols
			</clv:Title>
			<clv:Desc>
				Prefix for data types enumerated symbols.
				Use $ to indicate an empty string.
Use ${NWID} to indicate the network ID.
			</clv:Desc>
			<clv:Default>kCAN_${NWID}_</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_enum_type_prefix"
			category="catCAN_general">
			<clv:Title>
				Prefix for type names of signal enumerations
			</clv:Title>
			<clv:Desc>
				Prefix for type names of signal enumerations.
Leave empty to name the generated types exactly as the source data_type.
Use ${DATATYPE} to indicate the Data_Type name.
			</clv:Desc>
			<clv:Default>t_${DATATYPE}</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="list" id="CAN_msg_search_algorithms"
			category="catCAN_general" is_read_only="true" is_advanced="false">
			<clv:Title>Msg search algorithms</clv:Title>
			<clv:Desc>Type of search algorithms to implement for processing RX
				can messages.</clv:Desc>
			<clv:Default>["auto", "linear", "search_tree", "multi_search_tree", "hash"]</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_msg_search_algorithm"
			category="catCAN_general" is_advanced="false" validator='["comgen.CAN", "CAN_msg_search_algorithms"]'>
			<clv:Title>Msg search algorithm</clv:Title>
			<clv:Desc>
				Type of search algorithms to use for processing RX can
				messages.
			</clv:Desc>
			<clv:Default>auto</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int"
			id="CAN_msg_search_algorithm_param1" category="catCAN_general"
			is_optional="true" is_advanced="true">
			<clv:Title>Msg search algorithm - Parameter 1</clv:Title>
			<clv:Desc>
				Parameter 1 of the selected search algorithm.
			</clv:Desc>
			<clv:Default>32</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int"
			id="CAN_msg_search_algorithm_param2" category="catCAN_general"
			is_optional="true" is_advanced="true">
			<clv:Title>Msg search algorithm - Parameter 2</clv:Title>
			<clv:Desc>
				Parameter 2 of the selected search algorithm.
			</clv:Desc>
			<clv:Default>0</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean" id="CAN_init_timeouts_val">
			<clv:Title>Determine initial value for timeout flags.</clv:Title>
			<clv:Desc>If set to true timeout flags of rx CAN messages will be initialized as true. If set to false, timeout flags will be initialized as false.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_tx_task_period"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Period of TX task</clv:Title>
			<clv:Desc>Period of TX task for transmission of spontaneous messages.</clv:Desc>
			<clv:Default>10</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_tx_period_tolerance"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Tolerance for TX period</clv:Title>
			<clv:Desc>Tolerance in percentage to deviate from TX message period before throwing a warning message.</clv:Desc>
			<clv:Default>10</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_rx_task_period"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Period of RX task</clv:Title>
			<clv:Desc>Period of task for processing RX messages timeouts.</clv:Desc>
			<clv:Default>20</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_rx_timeout_tolerance"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Tolerance for RX timeout</clv:Title>
			<clv:Desc>Tolerance in percentage to deviate from RX message timeouts before throwing a warning message.</clv:Desc>
			<clv:Default>10</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_tx_queue_len"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Length of queue for TX messages</clv:Title>
			<clv:Desc>
				Length of queue of messages waiting for transmission.
			</clv:Desc>
			<clv:Default>5</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_tx_queue_task_ms"
			category="catCAN_network" is_advanced="true">
			<clv:Title>Time in ms of TX queue task</clv:Title>
			<clv:Desc>
				Time in ms of TX queue task.
			</clv:Desc>
			<clv:Default>10</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean" id="CAN_tx_confirm_msg_id"
			category="catCAN_network">
			<clv:Title>TX confirm mesage ID</clv:Title>
			<clv:Desc>
				If True, TX confirmation will check for transmitted ID.
			</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_tx_data_init_val" category="catCAN_messages">
			<clv:Title>TX Data initial value</clv:Title>
			<clv:Desc>TX Data initial value.</clv:Desc>
			<clv:Default>0</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_rx_data_init_val" category="catCAN_messages">
			<clv:Title>RX Data initial value</clv:Title>
			<clv:Desc>RX Data initial value.</clv:Desc>
			<clv:Default>0</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean"
			id="CAN_protect_direct_access" category="catCAN_messages">
			<clv:Title>Protect direct access to data buffers</clv:Title>
			<clv:Desc>
				If set to True, the functions for reading and writing
				signals will be done in critical sections. If set to
				False, no critical sections will be used.
			</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean" id="CAN_gen_all_non_overlapping"
			category="catCAN_network" is_advanced="true">
			<clv:Title>
				Generate all network with no overlaping between nodes
				and groups.
			</clv:Title>
			<clv:Desc>Generate all network with no overlaping between nodes and groups.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean"
			id="CAN_write_signals_init" category="catCAN_messages">
			<clv:Title>Write signal intializations</clv:Title>
			<clv:Desc>If set to True, signals will be initialized as specified in the CAN network. If set to False signals won't be individually initilized. They will all have the value in parameters CAN_rx_data_init_val and CAN_tx_data_init_val.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean"
			id="CAN_optimize_signals_init" category="catCAN_messages">
			<clv:Title>Optimize signal intializations</clv:Title>
			<clv:Desc>If set to True, code for initializing signals with init value equal to the one in parameter CAN_rx_data_init_val won't be generated. If set to False code will be generated as long as the signal has any valid defined init value.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean"
			id="CAN_write_signals_fails" category="catCAN_messages">
			<clv:Title>Write signal fail-safe values</clv:Title>
			<clv:Desc>If set to True, signals will get the specified fail-safe value upon timeout. If set to False, no change in signals data will be made upon timeout.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_dbc_tx_type_name"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC send type attribute name</clv:Title>
			<clv:Desc>
				DBC send type attribute name to be used for the
				generation of the DBC file.
			</clv:Desc>
			<clv:Default>GenMsgSendType</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="list" id="CAN_dbc_tx_type_values"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC send type attribute values</clv:Title>
			<clv:Desc>DBC send type attribute values to be used for the generation of the DBC file. The list needs to be at least of 4 elements with following order -> [triggered, cyclic, cyclicAndTriggered, cyclicIfActive, ...] </clv:Desc>
			<clv:Default>["triggered", "cyclic", "cyclicAndTriggered", "cyclicIfActive", "cyclicIfActiveAndTriggered", "none"]</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_dbc_tx_type_value_default"
			category="catCAN_DBC" is_read_only="false" is_advanced="true"
			validator='["comgen.CAN", "CAN_dbc_tx_type_values"]'>
			<clv:Title>DBC send type attribute default value</clv:Title>
			<clv:Desc>
				DBC send type attribute default value. Needs to be one of the values of parameter CAN_dbc_tx_type_values.
			</clv:Desc>
			<clv:Default>none</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="boolean" id="CAN_dbc_timeout_per_node"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC message timeout attribute per node?</clv:Title>
			<clv:Desc>If set to true, an attribute for each node with defined timeout will be generated. Name of the attribute will be determined by parameter CAN_dbc_timeout_node_name.
			If set to false, only 1 timeout attribute will be generated per message (not per subscribed node). This timeout will be valid for all subscribers and the attribute name will be determined by parameter CAN_dbc_timeout_name.</clv:Desc>
			<clv:Default>True</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_dbc_timeout_name"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC attribute name for message-level timeouts.</clv:Title>
			<clv:Desc>
				DBC attribute name for message-level timeouts. Only used if CAN_dbc_timeout_per_node is set to false.
			</clv:Desc>
			<clv:Default>GenMsgTimeoutTime</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="str" id="CAN_dbc_timeout_node_name"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC attribute name for subscriber node-level timeouts.</clv:Title>
			<clv:Desc>
				DBC attribute name for subscriber node-level timeouts. Use ${NODEID} to indicate the node name.
				Only used if CAN_dbc_timeout_per_node is set to true.
			</clv:Desc>
			<clv:Default>GenMsgTimeoutTime_${NODEID}</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_dbc_timeout_max_value"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>Maximum allowed timoeut value</clv:Title>
			<clv:Desc>
				Maximum allowed timoeut value in milliseconds for the DBC generation.
			</clv:Desc>
			<clv:Default>60000</clv:Default>
		</clv:ParamDefinition>
		<clv:ParamDefinition type="int" id="CAN_dbc_timeout_default"
			category="catCAN_DBC" is_read_only="false" is_advanced="true">
			<clv:Title>DBC default timeout value. </clv:Title>
			<clv:Desc>Default timeout value to use for cyclic and cyclic_spontan messages if none is specified.
			
			Use format [period_times, fixed_time], where:
			 * period_times: integer value that indicates a multiplier of the message cycle time (msg_cycle_time)
			 * fixed_time: integer value that indicates a time in milliseconds.
			 
			 The actual default timeout in milliseconds will be determined as follows:
			 
			 timeout_ms = (period_times * msg_cycle_time) + fixed_time
			 
			 It timoeut_ms is zero then it means no timeout will be defined.</clv:Desc>
			<clv:Default>0</clv:Default>
		</clv:ParamDefinition></clv:ParamsDefinitions>
</clv:ComponentDefinition>